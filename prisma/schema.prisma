generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ---- seus modelos (User, Account, Session, Video, etc.) ---- */

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  videos    Video[]
  status     UserStatus @default(PENDING) // PENDING | APPROVED | BLOCKED
  role         UserRole   @default(USER)    // USER | ADMIN
  
  stripeCustomerId   String?
  stripeSubscriptionId String?
  plan               String?                         // ex.: "pro"
  isActive           Boolean   @default(false)       // tem acesso pago?
  activeUntil        DateTime?        

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  refresh_token_expires_in   Int?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id           String   @id @default(cuid())
  title        String
  description  String
  hashtag      String
  publishedAt  DateTime
  driveFileId  String
  driveWebView String
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  status       String?  
  categoria    String?  
  privacidade  String?  
}

enum UserStatus {
  PENDING
  APPROVED
  BLOCKED
}

enum UserRole {
  USER
  ADMIN
}